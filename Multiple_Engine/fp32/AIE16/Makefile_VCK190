# Author : Kaustubh Mhatre (kmhatre@asu.edu)
# Advent Lab @ asu 
# Note: This make file is partially working. 
mkfile_path := $(abspath $(lastword $(MAKEFILE_LIST)))
mkfile_dir := $(dir $(mkfile_path))

#Host and target defination 
TARGET   = hw
MODE	 = linux
HOST_ARCH = aarch64
PRE_BUILT = 0

# PLATFORM_REPO_PATHS=/opt/xilinx/platforms
PLATFORM_NAME= xilinx_vck190_base_202220_1
PLATFORM = ${PLATFORM_REPO_PATHS}/${PLATFORM_NAME}/${PLATFORM_NAME}.xpfm
XCLBIN   = ${PLATFORM_NAME}${TARGET}.xsa
XSA	 = vck190_aie_base_graph_${TARGET}.xsa
XPFM	 = vck190_xpfm

HOST_EXE = hostexe
HOST_SRCS := ./host/host.cpp
SYSROOT_PATH = /opt/AMD/common_files/xilinx-versal-common-v2022.2/
SYSROOT = ${SYSROOT_PATH}/sysroots/cortexa72-cortexa53-xilinx-linux
SDKTARGETSYSROOT = ${SYSROOT}
EDGE_COMMON_SW_PATH = ./
EDGE_COMMON_SW= ${EDGE_COMMON_SW_PATH}/xilinx-versal-common-v2022.2
BUILD_DIR_MAIN = build
EXEC_DIR = output

FINAL_XCLBIN=mm_${TARGET}.xclbin
TEMP_DIR := ./$(BUILD_DIR_MAIN)/_x.$(TARGET).${PLATFORM_NAME}
BUILD_DIR := ./$(BUILD_DIR_MAIN)/build_dir.$(TARGET).${PLATFORM_NAME}
KERNEL_XO :=$(TEMP_DIR)/dma0.xo 

# AIE specific variables
GRAPH   := aie/aie_top_all.cpp
LIBADF  = libadf.a
AIE_WORK_DIR = $(BUILD_DIR_MAIN)/Work_AIE
AIE_SIM_DIR = sim/aiesim
AIE_CMPL_CMD = aiecompiler -platform=${PLATFORM} --target=hw --stacksize=1024 --pl-register-threshold=250 --pl-freq=230  -include="./aie" -include="./aie/layer0"  --constraints ./aie_top_all_aie_mapped.aiecst --disable-transform-broadcast-split=false -workdir=./$(AIE_WORK_DIR) ${GRAPH} --output-archive=$(EXEC_DIR)/$(LIBADF)
AIE_SIM_CMD = aiesimulator --pkg-dir=./$(AIE_WORK_DIR) --dump-vcd $(AIE_SIM_DIR)/trace --profile -o $(AIE_SIM_DIR)
AIE_HOSTEXE = aie_control_xrt.o
ifeq ($(PRE_BUILT),1)
	AIE_HOSTEXE := pre_built/aie_control_xrt.o
endif

EMU_CMD = ./launch_hw_emu.sh
PACKAGE_OUT = ./package.$(TARGET)
PRE_BUILT_XCLBIN = ./pre_built/${XCLBIN}
PRE_BUILT_LIBADF = ./pre_built/${LIBADF}
RM = rm -f
RMDIR = rm -rf
##########################################################################################################################################################
### DO NOT MODIFY BELOW THIS LINE UNLESS NECESSARY
################################################################################################################################################

CUR_DIR := $(patsubst %/,%,$(dir $(MK_PATH)))

BINARY_CONTAINERS += $(BUILD_DIR)/${XCLBIN}
VCC      = v++
VPP_XO_FLAGS += -c --platform $(PLATFORM) --save-temps --optimize 2 -g
VPP_XO_FLAGS += --hls.jobs 8
VPP_XO_FLAGS += -I$(CUR_DIR)/kernel
VPP_XO_FLAGS += --profile.data all:all:all

GCC_FLAGS := -Wall -c \
			 -std=c++14 \
			 -Wno-int-to-pointer-cast \
			 --sysroot=$(SYSROOT) \

GCC_INCLUDES := -I$(SYSROOT)/usr/include/xrt \
				-I./  \
				-I${XILINX_VITIS}/aietools/include \
				-I${XILINX_VITIS}/include \
				-I./aie
				#-I$(SYSROOT)/usr/include \


GCC_LIB := -lxaiengine -ladf_api_xrt -lxrt_core -lxrt_coreutil \
		   -L$(SYSROOT)/usr/lib \
		   --sysroot=$(SYSROOT) \
		   -L${XILINX_VITIS}/aietools/lib/aarch64.o


CXX := $(XILINX_VITIS)/gnu/aarch64/lin/aarch64-linux/bin/aarch64-linux-gnu-g++


CLFLAGS += -t $(TARGET) --platform $(PLATFORM) --save-temps --optimize 2
ifneq ($(TARGET), hw)
	CLFLAGS += -g
endif
CLFLAGS += --hls.jobs 8
CLFLAGS += --config ./conn.cfg
CLFLAGS += --clock.defaultFreqHz 220000000
CLFLAGS += --profile.data all:all:all

LDCLFLAGS := --vivado.synth.jobs 8 --vivado.impl.jobs 8

.PHONY: clean

###
# Guarding Checks. Do not modify.
###
check_defined = \
	$(strip $(foreach 1,$1, \
		$(call __check_defined,$1,$(strip $(value 2)))))

__check_defined = \
	$(if $(value $1),, \
		$(error Undefined $1$(if $2, ($2))))

guard-PLATFORM_REPO_PATHS:
	$(call check_defined, PLATFORM_REPO_PATHS, Set your where you downloaded xilinx_vck190_es1_base_202110_1)

guard-ROOTFS:
	$(call check_defined, ROOTFS, Set to: xilinx-versal-common-v2021.1/rootfs.ext4)

guard-IMAGE:
	$(call check_defined, IMAGE, Set to: xilinx-versal-common-v2021.1/Image)

guard-CXX:
	$(call check_defined, CXX, Run: xilinx-versal-common-v2021.1/environment-setup-cortexa72-cortexa53-xilinx-linux)

guard-SDKTARGETSYSROOT:
	$(call check_defined, SDKTARGETSYSROOT, Run: xilinx-versal-common-v2021.1/environment-setup-cortexa72-cortexa53-xilinx-linux)

###

all: aie build host package
run: all run_hw_emu
sd_card: all

aie: guard-PLATFORM_REPO_PATHS $(EXEC_DIR)/${LIBADF}
${LIBADF}: ${GRAPH}
	@mkdir -p $(AIE_WORK_DIR)
	@mkdir -p $(EXEC_DIR)
	${AIE_CMPL_CMD}
	@echo "COMPLETE: aie success."

aiesim: ${LIBADF}
	@mkdir -p $(AIE_SIM_DIR)
	${AIE_SIM_CMD}
	@echo "COMPLETE: aiesim success."

kernels:$(KERNEL_XO)
$(TEMP_DIR)/dma0.xo: kernel0/dma0.cpp kernel0/dma0.hpp
	mkdir -p $(TEMP_DIR)
	@mkdir -p $(EXEC_DIR)
	$(VCC) $(VPP_XO_FLAGS) -k dma0 --hls.clock 300000000:dma0 $< -o $@ | tee $(TEMP_DIR)/dma0.log
	@echo "### ***** dma0 compilation done! *****"
build: $(BINARY_CONTAINERS)
$(BUILD_DIR)/${XCLBIN}: ${KERNEL_XO} $(EXEC_DIR)/${LIBADF}
	mkdir -p $(BUILD_DIR)
	@mkdir -p $(EXEC_DIR)
	v++ -l $(CLFLAGS) --temp_dir $(BUILD_DIR) $(LDCLFLAGS) -o'$@' $(+) | tee $(BUILD_DIR)/hpc_xclbin.log


aiehost: $(AIE_HOSTEXE)
ifneq ($(PRE_BUILT),1)
$(AIE_HOSTEXE):
	@mkdir -p $(EXEC_DIR)
	$(CXX) $(GCC_FLAGS) $(GCC_INCLUDES) ./$(AIE_WORK_DIR)/ps/c_rts/aie_control_xrt.cpp -o'$@'
endif

host: guard-CXX guard-SDKTARGETSYSROOT ${HOST_EXE} 
${HOST_EXE}: ${AIE_HOSTEXE}
	$(CXX) $(HOST_SRCS) $(GCC_FLAGS) $(GCC_INCLUDES) -o $(EXEC_DIR)/main.o
	$(CXX) $(AIE_HOSTEXE) $(EXEC_DIR)/main.o $(GCC_LIB) -o $(EXEC_DIR)/$(HOST_EXE)
	@echo "COMPLETE: Host application created."

ECHO:= @echo

package: guard-ROOTFS guard-IMAGE guard-PLATFORM_REPO_PATHS package_${TARGET} 
ifeq ($(PRE_BUILT),1)	
unzip:
	rm -rf ./pre_built/libadf.a
	tar -xf ./pre_built/libadf.tar.gz -C ./pre_built
package_${TARGET}: unzip ${PRE_BUILT_LIBADF} ${PRE_BUILT_XCLBIN} host
	@mkdir -p $(EXEC_DIR)
	${VCC} -p -t ${TARGET} -f ${PLATFORM} \
		--package.out_dir $(PACKAGE_OUT) \
		--package.rootfs ${ROOTFS} \
		--package.kernel_image ${IMAGE} \
		--package.boot_mode=sd \
		--package.image_format=ext4 \
		--package.sd_file ${HOST_EXE} \
		${PRE_BUILT_LIBADF} ${PRE_BUILT_XCLBIN} -o ${FINAL_XCLBIN}
	@echo "COMPLETE: Package created."
else
package_${TARGET}: $(EXEC_DIR)/${LIBADF} ${BINARY_CONTAINERS} host
	${VCC} -p -t ${TARGET} -f ${PLATFORM} \
		--package.out_dir $(PACKAGE_OUT) \
		--package.rootfs ${ROOTFS} \
		--package.kernel_image ${IMAGE} \
		--package.boot_mode=sd \
		--package.image_format=ext4 \
		--package.defer_aie_run \
		--package.sd_file ${HOST_EXE} \
		$(EXEC_DIR)/${LIBADF} ${BINARY_CONTAINERS} -o ${FINAL_XCLBIN}
	@echo "COMPLETE: Package created."
endif

run_hw_emu: launch_hw_emu.sh
launch_hw_emu.sh: package_hw_emu
	$(EMU_CMD)

clean:
	-$(RMDIR) $(HOST_EXE) $(XCLBIN)/{*sw_emu*,*hw_emu*} 
	-$(RMDIR) profile_* TempConfig system_estimate.xtxt *.rpt *.csv *.o *.xo *.xpe *.xsa cfg qemu_dts_files emu_qemu_scripts *.db sim  #*.a  Work aie/*.ll _x*
	-$(RMDIR)  *v++* .Xil emconfig.json dltmp* xmltmp* *.log *.jou *.wcfg *.wdb *bin* *summary* *.BIN *.bif *.exe  *.log *.txt _x

cleanall: clean
	-$(RMDIR) build_dir* sd_card*
	-$(RMDIR) package.hw run_app.sh 
	-$(RMDIR) *xclbin.run_summary qemu-memory-_* emulation _vimage pl* start_simulation.sh *.xclbin
	$(MAKE) -C sw clean

cleanaie: cleansim
	-$(RMDIR) *.a  Work
cleansim:
	-$(RMDIR) aiesimulator_output foo.vcd ISS_RPC_SERVER_PORT
cleantemp:
	-$(RMDIR) ${TEMP_DIR}
cleanhost:
	-$(RMDIR) hostexe aie_control_xrt.o main.o
cleanpac:
	-$(RMDIR) ${FINAL_XCLBIN} mm_${TARGET}.xclbin.package_summary package.${TARGET} ./pre_built/libadf.a